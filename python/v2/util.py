#!/usr/bin/python
#
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Handles common tasks across all API samples."""

import argparse
from contextlib import closing
import os
from pathlib import Path
import socket
from urllib.request import urlopen

from google.oauth2 import service_account
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient import discovery

_API_NAME = "doubleclickbidmanager"
_DEFAULT_API_VERSION = "v2"

_DEFAULT_API_SCOPES = ["https://www.googleapis.com/auth/doubleclickbidmanager"]

_API_URL = "https://doubleclickbidmanager.googleapis.com/"

_CREDENTIALS_FILE = str(Path.home()) + "/client_secrets.json"

_SERVICE_ACCOUNT_CREDENTIALS_FILE = (
    str(Path.home()) + "/service_account_key.json"
)


def get_arguments(argv, desc, parents=None):
    """Validates and parses command line arguments.

    Args:
      argv: list of strings, the command-line parameters of the application.
      desc: string, a description of the sample being executed.
      parents: list of argparsers, the argparsers passed in by the method calling
        this function.

    Returns:
      The parsed command-line arguments.
    """
    parser = argparse.ArgumentParser(
        description=desc,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        parents=parents,
    )
    return parser.parse_args(argv[1:])


def get_credentials():
    """Steps through installed app OAuth 2.0 flow to retrieve credentials."""
    credentials_file = _CREDENTIALS_FILE

    # Asks for path to credentials file is not found in default location.
    if os.path.isfile(credentials_file):
        return InstalledAppFlow.from_client_secrets_file(
            credentials_file, _DEFAULT_API_SCOPES
        ).run_local_server()
    else:
        print(
            f"A client secrets file could not be found at {credentials_file}."
        )
        print("Please provide the path to a client secrets JSON file.")
        while True:
            print("Enter path to client secrets file:")
            credentials_file = input()
            if os.path.isfile(credentials_file):
                return InstalledAppFlow.from_client_secrets_file(
                    credentials_file, _DEFAULT_API_SCOPES
                ).run_local_server()
            else:
                print(f"No file was found at {credentials_file}.")


def get_service_account_credentials():
    """Steps through Service Account OAuth 2.0 flow to retrieve credentials."""
    service_account_credentials_file = _SERVICE_ACCOUNT_CREDENTIALS_FILE

    # Asks for path to credentials file is not found in default location.
    if os.path.isfile(service_account_credentials_file):
        return service_account.Credentials.from_service_account_file(
            service_account_credentials_file, scopes=_DEFAULT_API_SCOPES
        )
    else:
        print(
            "A service account key file could not be found at "
            f"{service_account_credentials_file}."
        )
        print("Please provide the path to a service account key JSON file.")
        while True:
            print("Enter path to service account key file:")
            service_account_credentials_file = input()
            if os.path.isfile(service_account_credentials_file):
                return service_account.Credentials.from_service_account_file(
                    service_account_credentials_file, scopes=_DEFAULT_API_SCOPES
                )
            else:
                print(
                    f"No file was found at {service_account_credentials_file}."
                )


def build_discovery_url(version, label, key):
    """Builds a discovery url from which to fetch the proper discovery document.

    Args:
      version: a str indicating the version number of the API.
      label: a str indicating a label to be applied to the discovery service
        request. This may be used as a means of programmatically retrieving a
        copy of a discovery document containing allowlisted content.
      key: a str generated by the user project attempting to retrieve this
        discovery document.

    Returns:
      A str that can be used to retrieve the disovery document for the API
        version given.
    """
    discovery_url = f"{_API_URL}/$discovery/rest?version={version}"
    if label:
        discovery_url += f"&labels={label}"
    if key:
        discovery_url += f"&key={key}"
    return discovery_url


def get_service(
    version=_DEFAULT_API_VERSION, label=None, key=None, useServiceAccount=False
):
    """Builds the Bid Manager API service used for the REST API.

    Args:
      version: a str indicating the Bid Manager API version to be retrieved.
      label: a str indicating a label to be applied to the discovery service
        request. This may be used as a means of programmatically retrieving a
        copy of a discovery document containing allowlisted content.
      key: a str identifying the user project.
      useServiceAccount: a bool indicating whether to authenticate using a
        service account.

    Returns:
      A googleapiclient.discovery.Resource instance used to interact with the
        Bid Manager API.
    """

    if useServiceAccount:
        credentials = get_service_account_credentials()
    else:
        credentials = get_credentials()

    discovery_url = build_discovery_url(version, label, key)

    socket.setdefaulttimeout(180)

    # Initialize client for Display & Video 360 API
    service = discovery.build(
        _API_NAME,
        version,
        discoveryServiceUrl=discovery_url,
        credentials=credentials,
    )

    return service


def download_file_from_cloud_storage(cloudStoragePath, outputFile):
    """Downloads the file from the GCS path to the given output file.

    Args:
      cloudStoragePath: string, the path to the file in Google Cloud Storage.
      outputFile: string, the path to which the file will be downloaded
    """
    with open(outputFile, "wb") as output:
        with closing(urlopen(cloudStoragePath)) as url:
            output.write(url.read())
        print("Download complete.")
